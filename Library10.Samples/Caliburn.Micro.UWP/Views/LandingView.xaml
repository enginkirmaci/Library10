<Page x:Class="Caliburn.Micro.UWP.Views.LandingView"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:c="using:Caliburn.Micro.UWP.Controls"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:local="using:Caliburn.Micro.UWP.Views"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      mc:Ignorable="d">

    <Grid Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition />
        </Grid.RowDefinitions>

        <c:PageHeader x:Name="pageHeader">
            <c:PageHeader.HeaderContent>
                <TextBlock x:Name="title"
                           Style="{ThemeResource PageTitleTextBlockStyle}"
                           Text="APP OVERVIEW" />
            </c:PageHeader.HeaderContent>
        </c:PageHeader>

        <ScrollViewer Grid.Row="1"
                      Margin="12,4,0,0"
                      EntranceNavigationTransitionInfo.IsTargetElement="True">
            <StackPanel>
                <TextBlock Style="{ThemeResource PageTitleTextBlockStyle}" Text="{Binding PageHeaderText}" />
                <TextBlock Style="{ThemeResource TitleTextBlockStyle}">Top-Level Navigation</TextBlock>
                <TextBlock Margin="12,4" Style="{ThemeResource BodyTextBlockStyle}">This sample demonstrates a universal Windows app with top-level navigation.</TextBlock>

                <TextBlock Margin="12,12,12,4" Style="{ThemeResource SubtitleTextBlockStyle}">Overview</TextBlock>
                <TextBlock Margin="12,4" Style="{ThemeResource BodyTextBlockStyle}">
                    The root of the app is an AppShell of type Page instead of a Frame.
                    It uses a SplitView to present both the top-level navigation menu and a Frame for navigating between pages in the app.  The AppShell also
                    provides basic keyboarding behavior for unhandled key presses.  The navigation menu is implemented using a customized ListView and
                    to enable the expected keyboarding experience.  The &quot;hamburger&quot; button for the app is floating in the top corner of the app at a
                    higher z-order.  To enable content on individual pages to be aware of the floating &quot;hamburger&quot; the app uses a PageHeader control
                    that is aware of the &quot;hamburger&quot;.
                </TextBlock>

                <TextBlock Margin="12,12,12,4" Style="{ThemeResource SubtitleTextBlockStyle}">Things to see:</TextBlock>
                <TextBlock Margin="12,8" Style="{ThemeResource BodyTextBlockStyle}">1) App.xaml - The startup sequence using AppShell as the root element instead of a Frame.</TextBlock>
                <TextBlock Margin="12,8" Style="{ThemeResource BodyTextBlockStyle}">2) AppShell.xaml - The &quot;chrome&quot; of the app.</TextBlock>
                <TextBlock Margin="12,8" Style="{ThemeResource BodyTextBlockStyle}">3) PageHeader.xaml - Control to wrap an item on a Page to avoid visual overlap with the floating hamburger.</TextBlock>
                <TextBlock Margin="12,8" Style="{ThemeResource BodyTextBlockStyle}">4) Styles.xaml - Styles including one for a hamburger button.</TextBlock>
                <TextBlock Margin="12,8" Style="{ThemeResource BodyTextBlockStyle}">5) NavMenuListView.cs - A customized ListView to show the navigation items and handle keyboarding.</TextBlock>
            </StackPanel>
        </ScrollViewer>
    </Grid>
</Page>